{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Documents\\\\aksh\\\\portfolio\\\\src\\\\components\\\\sections\\\\Chatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Chatbot.css';\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    type: 'bot',\n    text: 'Hi! Ask me anything about Akshat.'\n  }, {\n    type: 'bot',\n    text: 'Ask me about Akshat, his qualification, and much more!'\n  }]);\n  const [input, setInput] = useState('');\n  const [editing, setEditing] = useState(false);\n  const [editIndex, setEditIndex] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [chatbotOpen, setChatbotOpen] = useState(false);\n  const [botResponding, setBotResponding] = useState(false);\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const handleInputChange = e => setInput(e.target.value);\n  const sendMessage = async () => {\n    if (input.trim() === '') return;\n    const newMessages = [...messages];\n    if (editing) {\n      newMessages[editIndex].text = input;\n      setEditing(false);\n      setEditIndex(null);\n    } else {\n      newMessages.push({\n        type: 'user',\n        text: input\n      });\n    }\n    setMessages(newMessages);\n    setInput('');\n    setLoading(true);\n    try {\n      const response = await fetch('http://localhost:5000/send-msg', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: new URLSearchParams({\n          MSG: input\n        })\n      });\n      const data = await response.json();\n      const botResponse = data.Reply || \"Sorry, I didn't understand that.\";\n      setLoading(false);\n      typeWriterEffect(botResponse);\n    } catch (error) {\n      setMessages(prevMessages => [...prevMessages, {\n        type: 'bot',\n        text: 'Error: Unable to connect to the server.'\n      }]);\n      setLoading(false);\n    }\n  };\n  const typeWriterEffect = text => {\n    let index = 0;\n    setBotResponding(true);\n    setMessages(prevMessages => [...prevMessages, {\n      type: 'bot',\n      text: '',\n      partial: true\n    }]);\n    const interval = setInterval(() => {\n      setMessages(prevMessages => {\n        const updatedMessages = [...prevMessages];\n        const lastMessageIndex = updatedMessages.length - 1;\n        const lastMessage = updatedMessages[lastMessageIndex];\n        if (lastMessage && lastMessage.type === 'bot' && lastMessage.partial) {\n          lastMessage.text += text[index];\n        }\n        return updatedMessages;\n      });\n      index++;\n      if (index >= text.length) {\n        clearInterval(interval);\n        setMessages(prevMessages => {\n          const updatedMessages = [...prevMessages];\n          const lastMessageIndex = updatedMessages.length - 1;\n          const lastMessage = updatedMessages[lastMessageIndex];\n          if (lastMessage && lastMessage.partial) {\n            lastMessage.partial = false;\n            lastMessage.text = text;\n          }\n          return updatedMessages;\n        });\n        setBotResponding(false);\n        scrollToBottom();\n      }\n    }, 50); // Typing speed in milliseconds\n  };\n  const editMessage = index => {\n    setEditing(true);\n    setEditIndex(index);\n    setInput(messages[index].text);\n\n    // Remove the bot response for the edited user query\n    setMessages(prevMessages => {\n      const updatedMessages = [...prevMessages];\n      const nextMessageIndex = index + 1;\n\n      // Check if the next message exists and is a bot response\n      if (updatedMessages[nextMessageIndex] && updatedMessages[nextMessageIndex].type === 'bot') {\n        updatedMessages.splice(nextMessageIndex, 1); // Remove the bot response\n      }\n      return updatedMessages;\n    });\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') sendMessage();\n  };\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  const resetChat = () => {\n    setMessages([{\n      type: 'bot',\n      text: 'Hi! Ask me anything about Akshat.'\n    }]);\n  };\n  const BotButton = styled.button`\n        position: fixed;\n        bottom: 30px;\n        right: 30px;\n        height: 60px;\n        width: 60px;\n        border-radius: 50%;\n        background-color: ${({\n    theme\n  }) => theme.primary || \"#6C63FF\"};\n        color: white;\n        font-size: 30px;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        border: none;\n        cursor: pointer;\n        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);\n        z-index: 10;\n        &:hover {\n            transform: scale(1.5);\n            transition: all 0.3s ease;\n            background: transparent;\n        }\n    `;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-wrapper\",\n      children: [!chatbotOpen && /*#__PURE__*/_jsxDEV(BotButton, {\n        onClick: () => setChatbotOpen(true),\n        children: \"\\uD83D\\uDC3C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 21\n      }, this), chatbotOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatbox\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chatbox-header\",\n            children: [\"\\uD83D\\uDC3C Akshat's Virtual Assistant\", /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: resetChat,\n              className: \"refresh-chatbot-btn\",\n              children: \"\\uD83D\\uDD04\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setChatbotOpen(false),\n              className: \"close-chatbot-btn\",\n              children: \"\\u274C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"messages\",\n            children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `message ${message.type}`,\n              children: [message.type === 'user' && /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"edit-button\",\n                onClick: () => editMessage(index),\n                children: \"\\u270F\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 45\n              }, this), message.text]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 37\n            }, this)), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message bot\",\n              children: \"Fetching data...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: messagesEndRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: input,\n              onChange: handleInputChange,\n              onKeyDown: handleKeyPress,\n              placeholder: \"Type a message...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: sendMessage,\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(Chatbot, \"7+aL97az5OFr/AZPpVmdCIaPRio=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","jsxDEV","_jsxDEV","Fragment","_Fragment","Chatbot","_s","messages","setMessages","type","text","input","setInput","editing","setEditing","editIndex","setEditIndex","loading","setLoading","chatbotOpen","setChatbotOpen","botResponding","setBotResponding","messagesEndRef","scrollToBottom","handleInputChange","e","target","value","sendMessage","trim","newMessages","push","response","fetch","method","headers","body","URLSearchParams","MSG","data","json","botResponse","Reply","typeWriterEffect","error","prevMessages","index","partial","interval","setInterval","updatedMessages","lastMessageIndex","length","lastMessage","clearInterval","editMessage","nextMessageIndex","splice","handleKeyPress","key","_messagesEndRef$curre","current","scrollIntoView","behavior","resetChat","BotButton","button","theme","primary","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","message","ref","onChange","onKeyDown","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Documents/aksh/portfolio/src/components/sections/Chatbot.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './Chatbot.css';\r\nimport styled from \"styled-components\";\r\n\r\nconst Chatbot = () => {\r\n    const [messages, setMessages] = useState([\r\n        { type: 'bot', text: 'Hi! Ask me anything about Akshat.' },\r\n        { type: 'bot', text: 'Ask me about Akshat, his qualification, and much more!' }\r\n    ]);\r\n    const [input, setInput] = useState('');\r\n    const [editing, setEditing] = useState(false);\r\n    const [editIndex, setEditIndex] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [chatbotOpen, setChatbotOpen] = useState(false);\r\n    const [botResponding, setBotResponding] = useState(false);\r\n    const messagesEndRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        scrollToBottom();\r\n    }, [messages]);\r\n\r\n    const handleInputChange = (e) => setInput(e.target.value);\r\n\r\n    const sendMessage = async () => {\r\n        if (input.trim() === '') return;\r\n\r\n        const newMessages = [...messages];\r\n        if (editing) {\r\n            newMessages[editIndex].text = input;\r\n            setEditing(false);\r\n            setEditIndex(null);\r\n        } else {\r\n            newMessages.push({ type: 'user', text: input });\r\n        }\r\n\r\n        setMessages(newMessages);\r\n        setInput('');\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:5000/send-msg', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n                body: new URLSearchParams({ MSG: input }),\r\n            });\r\n\r\n            const data = await response.json();\r\n            const botResponse = data.Reply || \"Sorry, I didn't understand that.\";\r\n\r\n            setLoading(false);\r\n            typeWriterEffect(botResponse);\r\n        } catch (error) {\r\n            setMessages(prevMessages => [\r\n                ...prevMessages,\r\n                { type: 'bot', text: 'Error: Unable to connect to the server.' },\r\n            ]);\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const typeWriterEffect = (text) => {\r\n        let index = 0;\r\n        setBotResponding(true);\r\n\r\n        setMessages((prevMessages) => [\r\n            ...prevMessages,\r\n            { type: 'bot', text: '', partial: true },\r\n        ]);\r\n\r\n        const interval = setInterval(() => {\r\n            setMessages((prevMessages) => {\r\n                const updatedMessages = [...prevMessages];\r\n                const lastMessageIndex = updatedMessages.length - 1;\r\n                const lastMessage = updatedMessages[lastMessageIndex];\r\n\r\n                if (lastMessage && lastMessage.type === 'bot' && lastMessage.partial) {\r\n                    lastMessage.text += text[index];\r\n                }\r\n\r\n                return updatedMessages;\r\n            });\r\n\r\n            index++;\r\n\r\n            if (index >= text.length) {\r\n                clearInterval(interval);\r\n\r\n                setMessages((prevMessages) => {\r\n                    const updatedMessages = [...prevMessages];\r\n                    const lastMessageIndex = updatedMessages.length - 1;\r\n                    const lastMessage = updatedMessages[lastMessageIndex];\r\n\r\n                    if (lastMessage && lastMessage.partial) {\r\n                        lastMessage.partial = false;\r\n                        lastMessage.text = text;\r\n                    }\r\n\r\n                    return updatedMessages;\r\n                });\r\n\r\n                setBotResponding(false);\r\n                scrollToBottom();\r\n            }\r\n        }, 50); // Typing speed in milliseconds\r\n    };\r\n\r\n    const editMessage = (index) => {\r\n        setEditing(true);\r\n        setEditIndex(index);\r\n        setInput(messages[index].text);\r\n\r\n        // Remove the bot response for the edited user query\r\n        setMessages((prevMessages) => {\r\n            const updatedMessages = [...prevMessages];\r\n            const nextMessageIndex = index + 1;\r\n\r\n            // Check if the next message exists and is a bot response\r\n            if (updatedMessages[nextMessageIndex] && updatedMessages[nextMessageIndex].type === 'bot') {\r\n                updatedMessages.splice(nextMessageIndex, 1); // Remove the bot response\r\n            }\r\n\r\n            return updatedMessages;\r\n        });\r\n    };\r\n\r\n    const handleKeyPress = (e) => {\r\n        if (e.key === 'Enter') sendMessage();\r\n    };\r\n\r\n    const scrollToBottom = () => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n    };\r\n\r\n    const resetChat = () => {\r\n        setMessages([{ type: 'bot', text: 'Hi! Ask me anything about Akshat.' }]);\r\n    };\r\n\r\n    const BotButton = styled.button`\r\n        position: fixed;\r\n        bottom: 30px;\r\n        right: 30px;\r\n        height: 60px;\r\n        width: 60px;\r\n        border-radius: 50%;\r\n        background-color: ${({ theme }) => theme.primary || \"#6C63FF\"};\r\n        color: white;\r\n        font-size: 30px;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        border: none;\r\n        cursor: pointer;\r\n        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);\r\n        z-index: 10;\r\n        &:hover {\r\n            transform: scale(1.5);\r\n            transition: all 0.3s ease;\r\n            background: transparent;\r\n        }\r\n    `;\r\n\r\n    return (\r\n        <>\r\n            <div className=\"chatbot-wrapper\">\r\n                {!chatbotOpen && (\r\n                    <BotButton onClick={() => setChatbotOpen(true)}>\r\n                        🐼\r\n                    </BotButton>\r\n                )}\r\n\r\n                {chatbotOpen && (\r\n                    <div className=\"chatbot-container\">\r\n                        <div className=\"chatbox\">\r\n                            <div className=\"chatbox-header\">\r\n                                🐼 Akshat's Virtual Assistant\r\n                                <button onClick={resetChat} className=\"refresh-chatbot-btn\">🔄</button>\r\n                                <button onClick={() => setChatbotOpen(false)} className=\"close-chatbot-btn\">❌</button>\r\n                            </div>\r\n                            <div className=\"messages\">\r\n                                {messages.map((message, index) => (\r\n                                    <div key={index} className={`message ${message.type}`}>\r\n                                        {message.type === 'user' && (\r\n                                            <button className=\"edit-button\" onClick={() => editMessage(index)}>✏️</button>\r\n                                        )}\r\n                                        {message.text}\r\n                                    </div>\r\n                                ))}\r\n                                {loading && <div className=\"message bot\">Fetching data...</div>}\r\n                                <div ref={messagesEndRef}></div>\r\n                            </div>\r\n                            <div className=\"input-container\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={input}\r\n                                    onChange={handleInputChange}\r\n                                    onKeyDown={handleKeyPress}\r\n                                    placeholder=\"Type a message...\"\r\n                                />\r\n                                <button onClick={sendMessage}>Send</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}